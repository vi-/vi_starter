@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model;
		 -moz-box-sizing: $box-model;
					box-sizing: $box-model;
}

@mixin font-smoothing($value: true) {
	@if ($value == true) {
		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
	} @else {
		-moz-osx-font-smoothing: auto;
		-webkit-font-smoothing: subpixel-antialiased;
	}
}

// Mixin itself
@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

@mixin object-fit($fit: fill, $position: null){
	-o-object-fit: $fit;
		 object-fit: $fit;
	@if $position {
		-o-object-position: $position;
			 object-position: $position;
		font-family: 'object-fit: #{$fit}; object-position: #{$position}';
	} @else {
		font-family: 'object-fit: #{$fit}';
	}
}

@mixin ShitBrowser( $selector, $browsers: ('ie11', 'edge') ) {
	@if index( $browsers, 'ie11' ) {
		*::-ms-backdrop, #{$selector} { @content; }
	}
	@if index( $browsers, 'edge' ) {
		_:-ms-lang(x), #{$selector} { @content; }
	}
}

/* RESPONSIVE */

@mixin breakpoint($breakpoint) {
  @each $bp, $w in $breakpoints {
    @if str-index($breakpoint, max) and $bp == str-slice($breakpoint, 1, 2) {
      @media screen and (max-width: #{$w - 1}) { @content; }
    }
    @else if $bp == $breakpoint {
      @media screen and (min-width: $w) { @content; }
    }
  }
}
